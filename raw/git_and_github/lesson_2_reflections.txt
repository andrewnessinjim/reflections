What happens when you initialize a repository? Why do you need to do it?

Git creates a directory called ".git". Git stores all the history information of all the files of the
repository in this directory. Without doing this, git doesn't have any idea that we intend to
track the files in the directory. Initializing a directory is kind of like telling git to start treating 
the folder as a git repository.

-------------------------------------------------------------------------------------------------------------------

How is the staging area different from the working directory and the repository? What value do you think it offers?

The repository is the set of snapshots of all the commits performed on the repository. Working directory is a single
snapshot from that set, along with all the changes we have made since the last commit in that snapshot. 
But the staging area is not a snapshot at all. It simply keeps track of the changes that we are planning to commit.
We choose what stays in the staging area. Staging area enables us to craft the commits.

-------------------------------------------------------------------------------------------------------------------

How can you use the staging area to make sure you have one commit per logical change?

Staging area helps us craft the commits with greater flexibility. By crafting, I mean breaking up the commits into
logical units. This is very crucial if you want a maintainable software.

You can work on multiple features/bugs in a single working directory and still craft meaningful commits. Having a
single working  directory  which contains all of our active work is also very convenient. (This can be done without a
staging area, only as long as the changes don't  ever overlap a file. And you also have the added responsibility of
manually tracking whether they overlap)

staging helps you split up one large change into multiple commits
Staging helps you "check off" individual changes as you review a complex commit, and to concentrate on the stuff
that has not yet passed your review.

-------------------------------------------------------------------------------------------------------------------

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

By using branches, we can divert from the main line of commits and work on our own without hindering the main line (also
called as master). This enables us to work on experimental features which we are free to discard or merge to master later.
If we choose to discard, then a single command is enough and the master is unaffected. If we choose to merge, git can help
us do it automatically. Having one branch per release cycle is also helpful as we can work independently on each release without
affecting other releases.

-------------------------------------------------------------------------------------------------------------------
